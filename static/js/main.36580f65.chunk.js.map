{"version":3,"sources":["components/reviews/Review.js","Context.js","components/reviews/Reviews.js","components/layouts/Header.js","App.js","serviceWorker.js","index.js"],"names":["Review","state","showReviewInfo","_this2","this","_this$props$review","props","review","rating","author","body","publish_date","react_default","a","createElement","className","onClick","setState","style","cursor","dist_default","format","Component","Context","React","createContext","Provider","_Component","_getPrototypeOf2","_this","Object","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","reviews","getReviews","axios","get","headers","x-api-key","then","res","sortReviews","data","sort","b","catch","error","console","log","inherits","createClass","key","value","children","Consumer","Reviews","Fragment","map","reviews_Review","id","Header","branding","href","defaultProps","App","Context_Provider","layouts_Header","reviews_Reviews","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36580f65.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Moment from \"react-moment\";\n\nclass Review extends Component {\n  state = {\n    showReviewInfo: false\n  };\n\n  render() {\n    const { rating, author, body, publish_date } = this.props.review;\n    const { showReviewInfo } = this.state;\n\n    return (\n      <div className=\"card card-body mb-3\">\n        <h4>\n          Rating: {rating}{\" \"}\n          <i\n            onClick={() =>\n              this.setState({ showReviewInfo: !this.state.showReviewInfo })\n            }\n            className=\"fas fa-sort-down\"\n            style={{ cursor: \"pointer\" }}\n          />\n        </h4>\n        {showReviewInfo ? (\n          <ul className=\"list-group\">\n            <li className=\"list-group-item\">Author: {author}</li>\n            <li className=\"list-group-item\">Review: {body}</li>\n\n            <li className=\"list-group-item\">\n              Date: <Moment format=\"YYYY/MM/DD\">{publish_date}</Moment>\n            </li>\n          </ul>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nReview.propTypes = {\n  review: PropTypes.object.isRequired\n};\n\nexport default Review;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nconst Context = React.createContext();\n\nexport class Provider extends Component {\n  // Global State\n  state = {\n    reviews: []\n  };\n\n  componentDidMount() {\n    this.getReviews();\n  }\n\n  getReviews = () => {\n    const URL = \"https://shakespeare.podium.com/api/reviews\";\n    const config = {\n      headers: { \"x-api-key\": \"H3TM28wjL8R4#HTnqk?c\" }\n    };\n\n    axios\n      .get(URL, config)\n      .then(res => {\n        let sortReviews = res.data.sort((a, b) => {\n          return a.publish_date < b.publish_date\n            ? 1\n            : b.publish_date < a.publish_date\n            ? -1\n            : 0;\n        });\n\n        this.setState({\n          reviews: sortReviews\n        });\n      })\n      .catch(error => {\n        console.log(\"***** ERROR\", error);\n      });\n  };\n\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport const Consumer = Context.Consumer;\n","import React, { Component } from \"react\";\nimport Review from \"./Review\";\n// Consumer from Context\nimport { Consumer } from \"../../Context\";\n\nclass Reviews extends Component {\n  render() {\n    return (\n      <Consumer>\n        {value => {\n          const { reviews } = value;\n          return (\n            <React.Fragment>\n              <h1 className=\"display-4 mb-2\">\n                <span className=\"text-info\">Review</span> List\n              </h1>\n              {reviews.map(review => (\n                <Review key={review.id} review={review} />\n              ))}\n            </React.Fragment>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default Reviews;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Header = props => {\n  const { branding } = props;\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-info mb-3 py-0\">\n      <div className=\"container\">\n        <a href=\"/\" className=\"navbar-brand\">\n          {branding}\n        </a>\n        <div>\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <a href=\"/\" className=\"nav-link\">\n                Home\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nHeader.defaultProps = {\n  branding: \"Shakespeare Reviews\"\n};\n\nHeader.propTypes = {\n  branding: PropTypes.string.isRequired\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\n// Components\nimport Reviews from \"./components/reviews/Reviews\";\nimport Header from \"./components/layouts/Header\";\n// Context\nimport { Provider } from \"./Context\";\n// Css\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <div className=\"App\">\n          <Header branding=\"Review Manager\" />\n          <div className=\"container\">\n            <Reviews />\n          </div>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}